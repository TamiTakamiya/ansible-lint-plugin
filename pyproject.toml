[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools >= 68.2.2",
  "setuptools_scm[toml] >= 7.1.0"
]

[project]
authors = [
  {"email" = "ttakamiy@redhat.com", "name" = "Tami Takamiya"}
]
classifiers = [
  'Development Status :: 2 - Pre-Alpha',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: Apache Software License',
  'Operating System :: OS Independent',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: Implementation :: CPython',
  'Programming Language :: Python',
  'Topic :: Software Development',
  'Topic :: Utilities'
]
description = "Ansible plugin for running ansible-lint"
dynamic = ["dependencies", "optional-dependencies", "version"]
keywords = ["ansible"]
license = {text = "Apache"}
maintainers = [
  {"email" = "ttakamiy@redhat.com", "name" = "Tami Takamiya"}
]
name = "ansible-lint-plugin"
readme = "README.md"
requires-python = ">=3.10"

[project.scripts]
ansible-lint-plugin = "ansible_lint_plugin.__main__:main"

[project.urls]
changelog = "https://github.com/TamiTakamiya/ansible-lint-plugin/releases"
# documentation = "https://ansible-lint-plugin.readthedocs.io/en/latest/" # doesn't exist yet
homepage = "https://github.com/TamiTakamiya/ansible-lint-plugin/"
repository = "https://github.com/TamiTakamiya/ansible-lint-plugin/"

[tool.mypy]
exclude = "(venv|build|dist|test/local-content|site-packages|~/.pyenv|examples/playbooks/collections|plugins/modules)"
files = ["src", "tests"]
strict = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "ansiblelint.*"
]

[tool.pydoclint]
allow-init-docstring = true
arg-type-hints-in-docstring = false
check-return-types = false
style = 'google'

[tool.pylint.IMPORTS]
preferred-modules = ["py:pathlib"]

[tool.pylint.MAIN]
extension-pkg-allow-list = ["black.parsing"]

[tool.pylint.MASTER]
bad-names = [
  "line_number", # use lineno instead
  # spell-checker:ignore linenumber
  "linenumber" # use lineno instead
]
# pylint defaults + f,fh,v,id
good-names = ["Run", "T", "_", "f", "fh", "i", "id", "j", "k", "v"]
# Ignore as being generated:
ignore-paths = "^src/ansible_lint_plugin/_version.*$"

[tool.pylint.SUMMARY]
# We don't need the score spamming console, as we either pass or fail
score = "n"

[tool.pylint.TYPECHECK]
# pylint is unable to detect Namespace attributes and will throw a E1101
generated-members = "options.*"

[tool.pylint.messages_control]
disable = [
  "W0718" # broad-exception-caught / ruff PLW0718
]

[tool.ruff]
builtins = ["__"]
fix = true
ignore = [
  # temporary disabled until we fix them:
  "ANN"
]
line-length = 100
select = ["ALL"]
target-version = "py310"

[tool.ruff.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.isort]
lines-after-imports = 2 # Ensures consistency for cases when there's variable vs function/class definitions after imports
lines-between-types = 1 # Separate import/from with 1 line

[tool.ruff.per-file-ignores]
# S101 Allow assert in tests
"tests/**" = ["S101"]

[tool.ruff.pydocstyle]
convention = "pep257"

[tool.setuptools.dynamic]
dependencies = {file = [".config/requirements.in"]}
optional-dependencies.dev = {file = [".config/requirements-dev.txt"]}
optional-dependencies.lock = {file = [".config/requirements-lock.txt"]}
optional-dependencies.test = {file = [".config/requirements-test.txt"]}

[tool.setuptools_scm]
local_scheme = "no-local-version"
write_to = "src/ansible_lint_plugin/_version.py"

[tool.tomlsort]
all = true
in_place = true
